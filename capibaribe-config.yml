version: 1.0

capibaribe:

  # nome do servidor
  affluentRiverNameProject:

    listenAndServer:
      # endereço e porta, ou apenas porta
      inAddress: ":8081"

    # ajuda com alguns erros para fase de teste
    debugServerEnable: true

    # habilita SSL
    ssl:
      enabled: false

      # Versões aceitas pelo Go na epoca em que o documento foi escrito
      # TLS 1.0 - 10
      # TLS 1.1 - 11
      # TLS 1.2 - 12
      # SSL 3.0 - 30
      version:
        min: 10
        max: 30

      # caminho completo do certificado
      certificate: /etc/nginx/company.com.crt
      certificateKey: /etc/nginx/company.com.key

      # veja a documentação do Go
      curvePreferences:
        - P256
        - P384
        - P521
        - X25519
      preferServerCipherSuites: false

      # A list of cipher suite IDs that are, or have been, implemented by this
      # package.
      #
      # Taken from https://www.iana.org/assignments/tls-parameters/tls-parameters.xml
      cipherSuites:
        - TLS_RSA_WITH_RC4_128_SHA
        - TLS_RSA_WITH_3DES_EDE_CBC_SHA
        - TLS_RSA_WITH_AES_128_CBC_SHA
        - TLS_RSA_WITH_AES_256_CBC_SHA
        - TLS_RSA_WITH_AES_128_CBC_SHA256
        - TLS_RSA_WITH_AES_128_GCM_SHA256
        - TLS_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
        - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
        - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
        - TLS_ECDHE_RSA_WITH_RC4_128_SHA
        - TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
        - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
        - TLS_FALLBACK_SCSV
      x509:
        # caminho completo do certificado
        certificate: /etc/nginx/company.com.crt
        certificateKey: /etc/nginx/company.com.key

    analyticsCheck:
      path: "/test"

    healthCheck:
      path: "/healthCheck"
      header:
        - key: "Content-Type"
          value: "application/json"
      body: "{\"code\": 200, \"status\":\"ok\"}"

    proxy:
        # ignore port faz com que apenas o host seja usado como referencia
      - ignorePort: true
        # host: 127.0.0.1 # se host em branco, aceita qualquer coisa
        # roundRobin -              joga a carga para o próximo servidor
        # lowTimeResponse         - procura o servidor com menor tempo de resposta por execução
        # lowTimeResponseAverage  - procura o servidor com menor tempo de resposta médio da lista de tempos de execuções
        # random -                  joga a carga de forma aleatória
        # overLoad -                joga todas a carga para o primeiro servidor até o número máximo de conexões ser atingido
        loadBalancing: roundRobin # roundRobin | lowTimeResponse | lowTimeResponseAverage | random
        path: "/menuData"
#        header:
#          - key: "test"
#            value: "estou vivo"
#            type: string # string | regExp
#          - key: "reg"
#            value: "^est"
#            type: regExp
        maxAttemptToRescueLoop: 10
        servers:
          - host: http://localhost:3000
            weight: 1
            overLoad: 1000000